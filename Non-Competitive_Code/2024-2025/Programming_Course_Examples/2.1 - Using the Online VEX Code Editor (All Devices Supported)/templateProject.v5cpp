{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor leftDriveMotorsMotorA = motor(PORT15, ratio18_1, true);\nmotor leftDriveMotorsMotorB = motor(PORT11, ratio18_1, true);\nmotor_group leftDriveMotors = motor_group(leftDriveMotorsMotorA, leftDriveMotorsMotorB);\n\nmotor rightDriveMotorsMotorA = motor(PORT14, ratio18_1, false);\nmotor rightDriveMotorsMotorB = motor(PORT13, ratio18_1, false);\nmotor_group rightDriveMotors = motor_group(rightDriveMotorsMotorA, rightDriveMotorsMotorB);\n\nmotor armMotorsMotorA = motor(PORT1, ratio36_1, false);\nmotor armMotorsMotorB = motor(PORT9, ratio36_1, true);\nmotor_group armMotors = motor_group(armMotorsMotorA, armMotorsMotorB);\n\nmotor intakeMotorsMotorA = motor(PORT10, ratio18_1, true);\nmotor intakeMotorsMotorB = motor(PORT2, ratio18_1, false);\nmotor_group intakeMotors = motor_group(intakeMotorsMotorA, intakeMotorsMotorB);\n\ndigital_out clampSolenoid = digital_out(Brain.ThreeWirePort.A);\ninertial inertialSensor = inertial(PORT20);\n\nbumper autonSelectionBumper = bumper(Brain.ThreeWirePort.E);\nbumper autonConfBumper = bumper(Brain.ThreeWirePort.C);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:                                               \n//    Author:\n//    Created:\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n#include <iostream>\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Begin project code\n\nvoid preAutonomous(void) {\n  leftDriveMotors.setPosition(0, degrees);\n  rightDriveMotors.setPosition(0, degrees);\n  armMotors.setPosition(0, degrees);\n  intakeMotors.setPosition(0, degrees);\n  leftDriveMotors.setMaxTorque(100, percent);\n  rightDriveMotors.setMaxTorque(100, percent);\n  armMotors.setMaxTorque(100, percent);\n  intakeMotors.setMaxTorque(100, percent);\n  leftDriveMotors.setVelocity(100, percent);\n  rightDriveMotors.setVelocity(100, percent);\n  armMotors.setVelocity(100, percent);\n  intakeMotors.setVelocity(100, percent);\n  armMotors.setTimeout(2, seconds);\n  armMotors.setStopping(hold);\n  intakeMotors.setStopping(hold);\n}\nvoid drive(double inches, std::string direction, int velocity)\n{\n  // Constant benchmarks\n  const int motorDegreesFor24Inches = 600;   // 600 is the hardcoded value found through testing. It will be different for every robot.\n  const double motorDegreesPerInch = motorDegreesFor24Inches / 24.25;\n\n  // Calculate the degrees the motors have to turn to drive the robot inches Inches\n  double motorDegrees = motorDegreesPerInch * inches;\n\n  // Inverts spin direction to move backwards\n  if (direction == \"reverse\")\n  {\n    motorDegrees *= -1;\n  }\n\n  // Spins the robot's four drive motors based on the given and calculated parameters\n  leftDriveMotors.spinFor(vex::directionType::fwd, motorDegrees, vex::rotationUnits::deg, velocity, vex::velocityUnits::pct, false);\n  rightDriveMotors.spinFor(vex::directionType::fwd, motorDegrees, vex::rotationUnits::deg, velocity, vex::velocityUnits::pct, true);\n}\n\nvoid turn(double degrees, std::string direction, int velocity)\n{\n  // Constant benchmarks\n  const int motorDegreesFor90DegreeTurn = 257; // 257 is the hardcoded value found through testing. It will be different for every robot.\n  const double motorDegreesPerDegreeTurn = motorDegreesFor90DegreeTurn / 90.0;\n\n  // Calculates the degrees the motors have to turn to turn the robot for the inputted degrees\n  double motorDegrees = motorDegreesPerDegreeTurn * degrees;\n\n  // Inverts spin direction to turn left\n  if (direction == \"left\")\n  {\n    motorDegrees *= -1;\n  }\n\n  // Spins the robot's four drive motors based on the given and calculated parameters\n  leftDriveMotors.spinFor(vex::directionType::fwd, motorDegrees, vex::rotationUnits::deg, velocity, vex::velocityUnits::pct, false);\n  rightDriveMotors.spinFor(vex::directionType::fwd, motorDegrees * -1, vex::rotationUnits::deg, velocity, vex::velocityUnits::pct, true);\n}\n\nvoid autonomous(void) {\n  armMotors.spinToPosition(440, degrees, true);\n  drive(24, \"forward\", 80);\n  armMotors.spinToPosition(250, degrees, true);\n  intakeMotors.spinToPosition(500, degrees, false);\n  drive(6, \"reverse\", 80);\n  turn(90, \"right\", 50);\n  drive(6, \"forward\", 80);\n  drive(14, \"reverse\", 80);\n  turn(60, \"left\", 50);      \n}\n\nvoid userControl(void) {\n  bool clampState = false;\n  bool clampLastState = false;\n  while (true) {\n    // Tank Drive\n    leftDriveMotors.spin(forward, Controller1.Axis3.position(), vex::velocityUnits::pct);\n    rightDriveMotors.spin(forward, Controller1.Axis2.position(), vex::velocityUnits::pct);\n\n    // Spin intake motors forward while L1 is pressed; reverse while L2 is pressed\n    if(Controller1.ButtonL1.pressing()){\n      intakeMotors.spin(forward);\n    }\n    else if(Controller1.ButtonL2.pressing()){\n      intakeMotors.spin(reverse);\n    }\n    else{\n      intakeMotors.stop();\n    }\n\n    // Move arm to 720deg when Up is pressed; 0deg when Down is pressed; lifts while R1 is pressed; lowers while R2 is pressed\n    // Note: the boolean true value used in the arm movement below halts all code until the arm can complete the movement or times out, if you \n    // don't want this behavior, write false (or nothing as it defaults to false)\n    if(Controller1.ButtonUp.pressing()){\n      armMotors.spinToPosition(720, degrees, true);\n    }\n    else if(Controller1.ButtonDown.pressing()){\n      armMotors.spinToPosition(0, degrees, true);\n    }\n    else if(Controller1.ButtonR1.pressing()){\n      armMotors.spin(forward);\n    }\n    else if(Controller1.ButtonR2.pressing()){\n      armMotors.spin(reverse);\n    }\n    else{\n      armMotors.stop();\n    }\n\n    // Toggle Clamp solenoid when X is pressed\n    if(Controller1.ButtonX.pressing() && !clampLastState){\n      clampState = !clampState;\n      clampLastState = true;\n    }\n    else if(!Controller1.ButtonX.pressing()){\n      clampLastState = false;\n    }\n\n    if(clampState){\n      clampSolenoid.set(true);\n    }\n    else{\n      clampSolenoid.set(false);\n    }\n    wait(20, msec);\n  }\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[15,11],"name":"leftDriveMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[14,13],"name":"rightDriveMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[1,9],"name":"armMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[10,2],"name":"intakeMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[1],"name":"clampSolenoid","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[20],"name":"inertialSensor","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[5],"name":"autonSelectionBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{"id":"partner"},"triportSourcePort":22},{"port":[3],"name":"autonConfBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}